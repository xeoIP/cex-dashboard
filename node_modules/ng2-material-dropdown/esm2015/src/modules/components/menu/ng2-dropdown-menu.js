/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, Renderer, ContentChildren, QueryList, Input } from '@angular/core';
import { trigger, style, transition, animate, keyframes, state } from '@angular/animations';
import { ACTIONS, arrowKeysHandler } from './actions';
import { Ng2MenuItem } from '../menu-item/ng2-menu-item';
import { DropdownStateService } from '../../services/dropdown-state.service';
export class Ng2DropdownMenu {
    /**
     * @param {?} state
     * @param {?} element
     * @param {?} renderer
     */
    constructor(state, element, renderer) {
        this.state = state;
        this.element = element;
        this.renderer = renderer;
        /**
         * \@name width
         */
        this.width = 4;
        /**
         * \@description if set to true, the first element of the dropdown will be automatically focused
         * \@name focusFirstElement
         */
        this.focusFirstElement = true;
        /**
         * \@name appendToBody
         */
        this.appendToBody = true;
        /**
         * \@name zIndex
         */
        this.zIndex = 1000;
        this.listeners = {
            arrowHandler: undefined,
            handleKeypress: undefined
        };
    }
    /**
     * \@name show
     * \@shows menu and selects first item
     * @param {?=} position
     * @param {?=} dynamic
     * @return {?}
     */
    show(position, dynamic = true) {
        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;
        const /** @type {?} */ wd = typeof window !== 'undefined' ? window : undefined;
        if (!this.state.menuState.isVisible) {
            // setting handlers
            this.listeners.handleKeypress = this.renderer.listen(dc.body, 'keydown', this.handleKeypress.bind(this));
            this.listeners.arrowHandler = this.renderer.listen(wd, 'keydown', arrowKeysHandler);
        }
        // update state
        this.state.menuState.isVisible = true;
        if (position) {
            this.updatePosition(position, dynamic);
        }
    }
    /**
     * \@name hide
     * @desc hides menu
     * @return {?}
     */
    hide() {
        this.state.menuState.isVisible = false;
        // reset selected item state
        this.state.dropdownState.unselect();
        // call function to unlisten
        this.listeners.arrowHandler ? this.listeners.arrowHandler() : undefined;
        this.listeners.handleKeypress ? this.listeners.handleKeypress() : undefined;
    }
    /**
     * \@name updatePosition
     * @desc updates the menu position every time it is toggled
     * @param {?} position {ClientRect}
     * @param {?} dynamic {boolean}
     * @return {?}
     */
    updatePosition(position, dynamic) {
        this.position = position;
        this.updateOnChange(dynamic);
    }
    /**
     * \@name handleKeypress
     * @desc executes functions on keyPress based on the key pressed
     * @param {?} $event
     * @return {?}
     */
    handleKeypress($event) {
        const /** @type {?} */ key = $event.keyCode;
        const /** @type {?} */ items = this.items.toArray();
        const /** @type {?} */ index = items.indexOf(this.state.dropdownState.selectedItem);
        if (!ACTIONS.hasOwnProperty(key)) {
            return;
        }
        ACTIONS[key].call(this, index, items, this.state.dropdownState);
    }
    /**
     * \@name getMenuElement
     * @return {?}
     */
    getMenuElement() {
        return this.element.nativeElement.children[0];
    }
    /**
     * \@name calcPositionOffset
     * @param {?} position
     * @return {?}
     */
    calcPositionOffset(position) {
        const /** @type {?} */ wd = typeof window !== 'undefined' ? window : undefined;
        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;
        if (!wd || !dc || !position) {
            return;
        }
        const /** @type {?} */ element = this.getMenuElement();
        const /** @type {?} */ supportPageOffset = wd.pageXOffset !== undefined;
        const /** @type {?} */ isCSS1Compat = ((dc.compatMode || '') === 'CSS1Compat');
        const /** @type {?} */ x = supportPageOffset ? wd.pageXOffset : isCSS1Compat ?
            dc.documentElement.scrollLeft : dc.body.scrollLeft;
        const /** @type {?} */ y = supportPageOffset ? wd.pageYOffset : isCSS1Compat ?
            dc.documentElement.scrollTop : dc.body.scrollTop;
        let { top, left } = this.applyOffset(`${position.top + (this.appendToBody ? y - 15 : 0)}px`, `${position.left + x - 5}px`);
        const /** @type {?} */ clientWidth = element.clientWidth;
        const /** @type {?} */ clientHeight = element.clientHeight;
        const /** @type {?} */ marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);
        const /** @type {?} */ marginFromRight = parseInt(left) + clientWidth;
        const /** @type {?} */ windowScrollHeight = wd.innerHeight + wd.scrollY;
        const /** @type {?} */ windowScrollWidth = wd.innerWidth + wd.scrollX;
        if (marginFromBottom >= windowScrollHeight) {
            top = `${parseInt(top.replace('px', '')) - clientHeight}px`;
        }
        if (marginFromRight >= windowScrollWidth) {
            const /** @type {?} */ marginRight = marginFromRight - windowScrollWidth + 30;
            left = `${parseInt(left.replace('px', '')) - marginRight}px`;
        }
        return { top, left };
    }
    /**
     * @param {?} top
     * @param {?} left
     * @return {?}
     */
    applyOffset(top, left) {
        if (!this.offset) {
            return { top, left };
        }
        const /** @type {?} */ offset = this.offset.split(' ');
        if (!offset[1]) {
            offset[1] = '0';
        }
        top = `${parseInt(top.replace('px', '')) + parseInt(offset[0])}px`;
        left = `${parseInt(left.replace('px', '')) + parseInt(offset[1])}px`;
        return { top, left };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;
        if (this.appendToBody) {
            // append menu element to the body
            dc.body.appendChild(this.element.nativeElement);
        }
    }
    /**
     * @param {?=} dynamic
     * @return {?}
     */
    updateOnChange(dynamic = true) {
        const /** @type {?} */ element = this.getMenuElement();
        const /** @type {?} */ position = this.calcPositionOffset(this.position);
        if (position) {
            this.renderer.setElementStyle(element, 'top', position.top.toString());
            this.renderer.setElementStyle(element, 'left', position.left.toString());
        }
        // select first item unless user disabled this option
        if (this.focusFirstElement &&
            this.items.first &&
            !this.state.dropdownState.selectedItem) {
            this.state.dropdownState.select(this.items.first, false);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        const /** @type {?} */ elem = this.element.nativeElement;
        elem.parentNode.removeChild(elem);
        if (this.listeners.handleKeypress) {
            this.listeners.handleKeypress();
        }
    }
}
Ng2DropdownMenu.decorators = [
    { type: Component, args: [{
                selector: 'ng2-dropdown-menu',
                styles: [`:host{display:block}.ng2-dropdown-menu{overflow-y:auto;box-shadow:0 1px 2px 0 rgba(0,0,0,.3);position:absolute;padding:.5em 0;background:#fff;border-radius:1px;max-height:400px;width:260px;min-height:0;display:block}.ng2-dropdown-menu.ng2-dropdown-menu--inside-element{position:fixed}.ng2-dropdown-menu.ng2-dropdown-menu--width--2{width:200px}.ng2-dropdown-menu.ng2-dropdown-menu--width--4{width:260px}.ng2-dropdown-menu.ng2-dropdown-menu--width--6{width:320px}.ng2-dropdown-backdrop{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1;overflow:hidden}:host /deep/ .ng2-menu-divider{height:1px;min-height:1px;max-height:1px;width:100%;display:block;background:#f9f9f9}`],
                template: `<!-- MENU -->
<div class='ng2-dropdown-menu ng2-dropdown-menu---width--{{ width }}'
     [class.ng2-dropdown-menu--inside-element]="!appendToBody"
     [class.ng2-dropdown-menu--open]="state.menuState.isVisible"
     [style.z-index]="zIndex"
     [@fade]="state.menuState.toString()">
        <div class="ng2-dropdown-menu__options-container"
             [@opacity]="state.menuState.toString()">
            <ng-content></ng-content>
        </div>
</div>

<!-- BACKDROP -->
<div class="ng2-dropdown-backdrop" *ngIf="state.menuState.isVisible" (click)="hide()"></div>
`,
                animations: [
                    trigger('fade', [
                        state('visible', style({ display: 'block', height: '*', width: '*' })),
                        state('hidden', style({ display: 'none', overflow: 'hidden', height: 0, width: 0 })),
                        transition('hidden => visible', [
                            animate('250ms ease-in', keyframes([
                                style({ opacity: 0, offset: 0 }),
                                style({ opacity: 1, offset: 1, height: '*', width: '*' }),
                            ]))
                        ]),
                        transition('visible => hidden', [
                            animate('350ms ease-out', keyframes([
                                style({ opacity: 1, offset: 0 }),
                                style({ opacity: 0, offset: 1, width: '0', height: '0' }),
                            ]))
                        ])
                    ]),
                    trigger('opacity', [
                        transition('hidden => visible', [
                            animate('450ms ease-in', keyframes([
                                style({ opacity: 0, offset: 0 }),
                                style({ opacity: 1, offset: 1 }),
                            ]))
                        ]),
                        transition('visible => hidden', [
                            animate('250ms ease-out', keyframes([
                                style({ opacity: 1, offset: 0 }),
                                style({ opacity: 0.5, offset: 0.3 }),
                                style({ opacity: 0, offset: 1 }),
                            ]))
                        ])
                    ])
                ]
            },] },
];
/** @nocollapse */
Ng2DropdownMenu.ctorParameters = () => [
    { type: DropdownStateService, },
    { type: ElementRef, },
    { type: Renderer, },
];
Ng2DropdownMenu.propDecorators = {
    "width": [{ type: Input },],
    "focusFirstElement": [{ type: Input },],
    "offset": [{ type: Input },],
    "appendToBody": [{ type: Input },],
    "zIndex": [{ type: Input },],
    "items": [{ type: ContentChildren, args: [Ng2MenuItem,] },],
};
function Ng2DropdownMenu_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Ng2DropdownMenu.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Ng2DropdownMenu.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    Ng2DropdownMenu.propDecorators;
    /**
     * \@name width
     * @type {?}
     */
    Ng2DropdownMenu.prototype.width;
    /**
     * \@description if set to true, the first element of the dropdown will be automatically focused
     * \@name focusFirstElement
     * @type {?}
     */
    Ng2DropdownMenu.prototype.focusFirstElement;
    /**
     * \@description sets dropdown offset from the button
     * \@name offset {string} follow format '<number> <number>' ex. '0 20'
     * @type {?}
     */
    Ng2DropdownMenu.prototype.offset;
    /**
     * \@name appendToBody
     * @type {?}
     */
    Ng2DropdownMenu.prototype.appendToBody;
    /**
     * \@name zIndex
     * @type {?}
     */
    Ng2DropdownMenu.prototype.zIndex;
    /**
     * \@name items
     * @type {?}
     */
    Ng2DropdownMenu.prototype.items;
    /** @type {?} */
    Ng2DropdownMenu.prototype.position;
    /** @type {?} */
    Ng2DropdownMenu.prototype.listeners;
    /** @type {?} */
    Ng2DropdownMenu.prototype.state;
    /** @type {?} */
    Ng2DropdownMenu.prototype.element;
    /** @type {?} */
    Ng2DropdownMenu.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,